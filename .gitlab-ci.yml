stages:
  - build
  - push
  - deploy

build:
  stage: build
  script:
    - docker build -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID .

push:
  stage: push
  variables:
    GIT_STRATEGY: none
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  script:
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID
  only:
    - master

deploy:
  stage: deploy
  image: hypnoglow/kubernetes-helm:3.1
  environment:
    name: production
  script:
    - kubectl config set-cluster k8s --server=$K8S_API_URL --insecure-skip-tls-verify=true
    - kubectl config set-credentials ci --token=$K8S_CI_TOKEN
    - kubectl config set-context ci --cluster=k8s --user=ci
    - kubectl config use-context ci
    - if [ "$(helm -n $CI_PROJECT_PATH_SLUG-$CI_ENVIRONMENT_NAME list | tail -n-1 | wc -l)" != "0" ] ; then
        helm upgrade --install
        --set app.repository=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
        --set app.tag=$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID
        --namespace $CI_PROJECT_PATH_SLUG-$CI_ENVIRONMENT_NAME
        $CI_PROJECT_PATH_SLUG .helm;
      else
        helm install
        --set app.repository=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
        --set app.tag=$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID
        --create-namespace --namespace $CI_PROJECT_PATH_SLUG-$CI_ENVIRONMENT_NAME
        $CI_PROJECT_PATH_SLUG .helm;
      fi
  only:
    - master
